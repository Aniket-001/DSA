//              -----SEGMENT TREE--------

class St{//for query --> minimum
    int[] arr;
    int[] seg;
    St(int[] a){
        arr=a;
        seg = new int[4*arr.length];
        this.build(0,arr.length-1,0);
    }
    void build(int l,int r,int i){//build the segment tree
        if(l==r){
            seg[i] = arr[l];
            return;
        }
        int mid = (l+r)>>1;
        build(l,mid,2*i+1);
        build(mid+1,r,2*i+2);
        seg[i] = Math.min(seg[2*i+1],seg[2*i+2]);
    }
    int query(int l,int r,int i,int j,int ind){//query--> l to r
        if(i>r || j<l) return Integer.MAX_VALUE;
        else if( i>=l && j<=r) return seg[ind];
        int mid = (i+j)>>1;
        int left = query(l,r,i,mid,2*ind+1);
        int right = query(l,r,mid+1,r,2*ind+2);
        return Math.min(left,right);
    }
    void update(int i,int val,int l,int r,int ind){
        if(l>i || r<i) return;
        if(l==i && r==i){
            arr[i]=val;
            seg[ind] = val;
            return;
        }
        int mid = (l+r)>>1;
        update(i,val,l,mid,2*ind+1);
        update(i,val,mid+1,r,2*ind+2);
        seg[ind] = Math.min(seg[2*ind+1],seg[2*ind+2]);
    }
}




//------- Lazy Propagation-----------
class St{//for query --> for sum query
    int[] arr;
    int[] seg;
    int[] lzy;
    St(int[] a){
        arr=a;
        seg = new int[4*arr.length];
        lzy = new int[4*arr.length];
        this.build(0,arr.length-1,0);
    }
    void build(int l,int r,int i){//build the segment tree
        if(l==r){
            seg[i] = arr[l];
            return;
        }
        int mid = (l+r)>>1;
        build(l,mid,2*i+1);
        build(mid+1,r,2*i+2);
        seg[i] = seg[2*i+1]+seg[2*i+2];
    }
    int query(int l,int r,int i,int j,int ind){//query--> l to r
        if(i>r || j<l) return 0;
        else if( i>=l && j<=r) return seg[ind];
        int mid = (i+j)>>1;
        int left = query(l,r,i,mid,2*ind+1);
        int right = query(l,r,mid+1,j,2*ind+2);
        return left+right;
    }
    void updateP(int i,int val,int l,int r,int ind){
        if(l>i || r<i) return;
        if(l==i && r==i){
            arr[i]=val;
            seg[ind] = val;
            return;
        }
        int mid = (l+r)>>1;
        updateP(i,val,l,mid,2*ind+1);
        updateP(i,val,mid+1,r,2*ind+2);
        seg[ind] = seg[2*ind+1]+seg[2*ind+2];
    }
    void updateR(int l,int r,int val,int i,int j,int ind){
        if(lzy[ind]!=0){
            seg[ind] += (j-i+1)*val;
            if(i!=j){
                lzy[2*ind+1]+=val;
                lzy[2*ind+2]+=val;
            }
            lzy[ind]=0;
        }
        if(l>j || r<i || i>j) return;
        else if( i>=l && j<=r){
            // arr[i]+=val;
            seg[ind] += (j-i+1)*val;
            if(i!=j){
                lzy[2*ind+1]+=val;
                lzy[2*ind+2]+=val;
            }
            return;
        }
        int mid = (i+j)>>1;
        updateR(l,r,val,i,mid,2*ind+1);
        updateR(l,r,val,mid+1,j,2*ind+2);
        seg[ind] = seg[2*ind+1]+seg[2*ind+2];
    }
}
